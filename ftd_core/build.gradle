apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

android {

    compileSdkVersion "${SDK}" as int

    defaultConfig {
        minSdkVersion "${MIN_SDK}" as int
        targetSdkVersion "${SDK}" as int
        versionCode "${VERSION_CODE}" as int
        versionName "${VERSION_NAME}"
    }

    buildTypes {

        dev {
            buildConfigField "String", "BASE_URL", "\"https://lkj-dev.v.laikang.com/\""
            debuggable true
            matchingFallbacks = ['debug']
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
        }

        debug {
            buildConfigField "String", "BASE_URL", "\"https://qa.laikangland.com/\""
        }
        release {
            minifyEnabled false
            buildConfigField "String", "BASE_URL", "\"https://fine.laikangland.com/\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    compileOnly 'com.squareup.retrofit2:retrofit:2.6.0'
    compileOnly 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    compileOnly 'io.reactivex.rxjava2:rxjava:2.2.10'
    compileOnly 'io.reactivex.rxjava2:rxandroid:2.1.1'
}



def group = "com.lk"
def version = "1.0.1"
def description = "通过给面部舌部拍照诊断身体状况。"
//def siteUrl = 'https://github.com/william198824/FaceTongueDoctor'
//def gitUrl = 'git@github.com:william198824/JTCameraViewDemo.git'
//def issueUrl = 'https://github.com/william198824/JTCameraViewDemo/issues'

setGroup(group)
setVersion(version)
setDescription(description)

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    options.encoding = "UTF-8"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

def properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("user")
    key = properties.getProperty("key")
    configurations = ['archives']
    pkg {
        repo = "lk"
        name = "FaceTongueDoctor"
        desc = description
        labels = ['android','camera']
        publish = true
        publicDownloadNumbers = true
    }
}
